{"dependencies":[{"kind":"library","name":"package:observe/observe.dart","id":"observe","comment":"\n*Warning*: this library is experimental, and APIs are subject to change.\n\nThis library is used to observe changes to [Observable] types. It also\nhas helpers to make implementing and using [Observable] objects easy.\n\nYou can provide an observable object in two ways. The simplest way is to\nuse dirty checking to discover changes automatically:\n\n    class Monster extends Unit with ObservableMixin {\n      @observable int health = 100;\n\n      void damage(int amount) {\n        print('$this takes $amount damage!');\n        health -= amount;\n      }\n\n      toString() => 'Monster with $health hit points';\n    }\n\n    main() {\n      var obj = new Monster();\n      obj.changes.listen((records) {\n        print('Changes to $obj were: $records');\n      });\n      // No changes are delivered until we check for them\n      obj.damage(10);\n      obj.damage(20);\n      print('dirty checking!');\n      Observable.dirtyCheck();\n      print('done!');\n    }\n\nA more sophisticated approach is to implement the change notification\nmanually. This avoids the potentially expensive [Observable.dirtyCheck]\noperation, but requires more work in the object:\n\n    class Monster extends Unit with ChangeNotifierMixin {\n      int _health = 100;\n      get health => _health;\n      set health(val) {\n        _health = notifyPropertyChange(const Symbol('health'), _health, val);\n      }\n\n      void damage(int amount) {\n        print('$this takes $amount damage!');\n        health -= amount;\n      }\n\n      toString() => 'Monster with $health hit points';\n    }\n\n    main() {\n      var obj = new Monster();\n      obj.changes.listen((records) {\n        print('Changes to $obj were: $records');\n      });\n      // Schedules asynchronous delivery of these changes\n      obj.damage(10);\n      obj.damage(20);\n      print('done!');\n    }\n\n[Tools](https://www.dartlang.org/polymer-dart/) exist to convert the first\nform into the second form automatically, to get the best of both worlds.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Observable","id":"Observable","comment":"\nInterface representing an observable object. This is used by data in\nmodel-view architectures to notify interested parties of [changes].\n\nThis object does not require any specific technique to implement\nobservability. If you mixin [ObservableMixin], [dirtyCheck] will know to\ncheck for changes on the object. You may also implement change notification\nyourself, by calling [notifyChange].\n\nYou can use [ObservableBase] or [ObservableMixin] to implement this.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"deliverChanges","id":"deliverChanges0()","comment":"\nSynchronously deliver pending [changes]. Returns true if any records were\ndelivered, otherwise false.\n","line":"54"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"notifyChange","id":"notifyChange1()","comment":"\nNotify observers of a change.\n\nFor most objects [ObservableMixin.notifyPropertyChange] is more\nconvenient, but collections sometimes deliver other types of changes such\nas a [ListChangeRecord].\n","children":[{"ref":{"name":"ChangeRecord","refId":"observe/ChangeRecord"},"kind":"param","name":"record","id":"record"}],"line":"63"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"dirtyCheck","id":"dirtyCheck0()","comment":"\nPerforms dirty checking of objects that inherit from [ObservableMixin].\nThis scans all observed objects using mirrors and determines if any fields\nhave changed. If they have, it delivers the changes for the object.\n","line":"76"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"ChangeRecord","refId":"observe/ChangeRecord"}]}]},"kind":"property","name":"changes","id":"changes","comment":"\nThe stream of change records to this object. Records will be delivered\nasynchronously.\n\n[deliverChanges] can be called to force synchronous delivery.\n","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasObservers","id":"hasObservers","comment":"\nTrue if this object has any observers, and should call\n[notifyChange] for changes.\n","line":"69"}],"uri":"package:observe/src/observable.dart","line":"23"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Observable","refId":"observe/Observable"}],"kind":"class","name":"ChangeNotifierMixin","id":"ChangeNotifierMixin","comment":"\nMixin implementing [Observable] object that performs its own change\nnotifications, and does not need to be considered by [Observable.dirtyCheck].\n\nWhen a field, property, or indexable item is changed, a derived class should\ncall [notifyPropertyChange]. See that method for an example.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_observed","id":"_observed0()","comment":"\nOverride this method to be called when the [changes] are first observed.\n","isPrivate":true,"line":"40"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_unobserved","id":"_unobserved0()","comment":"\nOverride this method to be called when the [changes] are no longer being\nobserved.\n","isPrivate":true,"line":"46"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"deliverChanges","id":"deliverChanges0()","line":"48"},{"kind":"method","name":"notifyPropertyChange","id":"notifyPropertyChange3()","comment":"\nNotify that the field [name] of this object has been changed.\n\nThe [oldValue] and [newValue] are also recorded. If the two values are\nidentical, no change will be recorded.\n\nFor convenience this returns [newValue]. This makes it easy to use in a\nsetter:\n\n    var _myField;\n    get myField => _myField;\n    set myField(value) {\n      _myField = notifyPropertyChange(\n          const Symbol('myField'), _myField, value);\n    }\n","children":[{"ref":{"name":"Symbol","refId":"dart.core/Symbol"},"kind":"param","name":"field","id":"field"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"oldValue","id":"oldValue"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"newValue","id":"newValue"}],"line":"80"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"notifyChange","id":"notifyChange1()","children":[{"ref":{"name":"ChangeRecord","refId":"observe/ChangeRecord"},"kind":"param","name":"record","id":"record"}],"line":"83"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"ChangeRecord","refId":"observe/ChangeRecord"}]}]},"kind":"property","name":"changes","id":"changes","line":"27"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasObservers","id":"hasObservers","comment":"\nTrue if this object has any observers, and should call\n[notifyPropertyChange] for changes.\n","line":"62"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"kind":"variable","name":"_changes","id":"_changes","isPrivate":true,"line":"24"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ChangeRecord","refId":"observe/ChangeRecord"}]},"kind":"variable","name":"_records","id":"_records","isPrivate":true,"line":"25"}],"uri":"package:observe/src/change_notifier.dart","line":"23"}],"uri":"package:observe/observe.dart","line":"71"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nEverything in Dart is an [Object].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"48"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"67"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"62"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk/lib/core/object.dart","line":"10"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"reactive_keyboard","children":[{"superclass":{"name":"ChangeNotifierMixin","refId":"observe/ChangeNotifierMixin"},"kind":"class","name":"ReactiveKeyboard","id":"ReactiveKeyboard","children":[{"isSetter":true,"kind":"method","name":"lineBuffer=","id":"lineBuffer=1()","comment":"\nA setter for `lineBuffer`.\n\nThe string is an observable buffer for the lineStream.  Set triggers change\n","children":[{"kind":"param","name":"line","id":"line"}],"line":"224"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"lineBuffer","id":"lineBuffer","comment":"\nA getter for `lineBuffer`.\n\nThe string is an observable buffer for the lineStream\n","line":"217"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"htmlLineBuffer","id":"htmlLineBuffer","comment":"\nA getter for `htmlLineBuffer`.\n\nThe string is an observable buffer for the lineStream\n","line":"239"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"keyStream","id":"keyStream","comment":"\nA getter for `keyStream`.\n\nThe stream returned will include all key press events except for the\ncontrol key and only the alt key if `allowAltKeyPress` was set to true\nin the constructor\n","line":"249"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"htmlKeyStream","id":"htmlKeyStream","comment":"\nA getter for `htmlKeyStream`.\n\nThe stream returned will include all key press events except for the\ncontrol key and only the alt key if `allowAltKeyPress` was set to true\nin the constructor, along with HTML characters escaped for easy printing\n","line":"268"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"htmlLineStream","id":"htmlLineStream","comment":"\nA getter for `htmlLineStream`\n\nThe stream returned will be a stream of lines that will be the buffered\nkeyboard input up until an enter key was pressed. This stream will also\ncorrectly handle deletion keys by removing the propper characters from\nthe buffered input. If the `allowEnterKeyPress` was set to true in the\nconstruction of this object then the buffered lines will contain the\ntrailing enter keys.\n","line":"282"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"lineStream","id":"lineStream","comment":"\nA getter for `lineStream`\n\nThe stream returned will be a stream of lines that will be the buffered\nkeyboard input up until an enter key was pressed. This stream will also\ncorrectly handle deletion keys by removing the propper characters from\nthe buffered input. If the `allowEnterKeyPress` was set to true in the\nconstruction of this object then the buffered lines will contain the\ntrailing enter keys.\n","line":"296"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"navStream","id":"navStream","comment":"\nA getter for the `navStram`\n\nThe stream returned will only consist of the ones specified in the\n`navKeys` parameter used to construct this object.\n","line":"327"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"hotKeyStream","id":"hotKeyStream","comment":"\nA getter for the `hotKeyStream`\n\nThe stream returned will be a stream of strings such that each string\nemitted will be the human readable representation of the key presses\nsuch that they are prefixed by their modifiers.\n","line":"345"},{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"isFinal":true,"kind":"variable","name":"_target","id":"_target","isPrivate":true,"line":"12"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isFinal":true,"kind":"variable","name":"rawKeyCombinedStream","id":"rawKeyCombinedStream","line":"13"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isFinal":true,"kind":"variable","name":"rawKeyUpStream","id":"rawKeyUpStream","line":"14"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isFinal":true,"kind":"variable","name":"rawKeyDownStream","id":"rawKeyDownStream","line":"15"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isFinal":true,"kind":"variable","name":"rawKeyPressStream","id":"rawKeyPressStream","line":"16"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"allowShiftOnlyHotKeys","id":"allowShiftOnlyHotKeys","line":"18"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"allowAltKeyPress","id":"allowAltKeyPress","line":"19"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"allowEnterKeyPress","id":"allowEnterKeyPress","line":"20"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"KeyCode","refId":"dart.dom.html/KeyCode"},{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"navKeys","id":"navKeys","line":"21"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"delKeys","id":"delKeys","line":"22"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_lineBuffer","id":"_lineBuffer","isPrivate":true,"line":"24"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_htmlLineBuffer","id":"_htmlLineBuffer","isPrivate":true,"line":"25"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_keyStream","id":"_keyStream","isPrivate":true,"line":"27"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_navStream","id":"_navStream","isPrivate":true,"line":"28"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_hotKeyStream","id":"_hotKeyStream","isPrivate":true,"line":"29"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"KEY_PRESS","id":"KEY_PRESS","line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"KEY_UP","id":"KEY_UP","line":"33"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"KEY_DOWN","id":"KEY_DOWN","line":"34"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"N","id":"N","line":"37"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NE","id":"NE","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"E","id":"E","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SE","id":"SE","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"S","id":"S","line":"41"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SW","id":"SW","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"W","id":"W","line":"43"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NW","id":"NW","line":"44"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isStatic":true,"kind":"variable","name":"DEFAULT_DEL_KEYS","id":"DEFAULT_DEL_KEYS","line":"46"},{"returnType":{"name":"ReactiveKeyboard","refId":"reactive_keyboard/ReactiveKeyboard"},"kind":"constructor","name":"","id":"9()","comment":"\nThe Factory constructor for making a new [ReactiveKeyboard] object\n\nTakes a target [Element] to observe [KeyEvent] from and some named\nparameters to aid in the configuration of the ReactiveKeyboard. Optional\nnamed argmuments are as follows:\n * [allowShiftOnlyHotKeys] = false: Whether or not to capture shift only\n   hot key modifiers--excludes shift+_SPECIAL_KEYS\n * [allowAltKeyPress] = false: Whether or not to allow [KeyCode.ALT] key presses\n   through the [keyStream]\n * [allowEnterKeyPress] = false: Whether or not to include the [KeyCode.ENTER]\n   as part of the line for the [lineStream]\n * [navKeys] = [NUM_NAV] A map of keys to filter for in the [navStream]\n * [delKeys] = [DEFAULT_DEL_KEYS]\n\n    var keyboard = new ReactiveKeyboard(query(\"body\"))\n","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"kind":"param","name":"target","id":"target","line":"158"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowShiftOnlyHotKeys","id":"allowShiftOnlyHotKeys","line":"159"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowAltKeyPress","id":"allowAltKeyPress","line":"160"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowEnterKeyPress","id":"allowEnterKeyPress","line":"161"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"int","refId":"dart.core/int"}]},"defaultValue":"NUM_NAV","isOptional":true,"isNamed":true,"kind":"param","name":"navKeys","id":"navKeys","line":"162"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"defaultValue":"DEFAULT_DEL_KEYS","isOptional":true,"isNamed":true,"kind":"param","name":"delKeys","id":"delKeys","line":"163"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"keyPressStream","id":"keyPressStream","line":"164"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"keyUpStream","id":"keyUpStream","line":"165"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"keyDownStream","id":"keyDownStream","line":"166"}],"line":"157"},{"kind":"constructor","name":"_","id":"_10()","children":[{"ref":{"name":"Element","refId":"dart.dom.html/Element"},"initializedField":{"name":"_target","refId":"reactive_keyboard/ReactiveKeyboard/_target"},"kind":"param","name":"_target","id":"_target","isPrivate":true,"line":"200"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"initializedField":{"name":"rawKeyPressStream","refId":"reactive_keyboard/ReactiveKeyboard/rawKeyPressStream"},"kind":"param","name":"rawKeyPressStream","id":"rawKeyPressStream","line":"201"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"initializedField":{"name":"rawKeyUpStream","refId":"reactive_keyboard/ReactiveKeyboard/rawKeyUpStream"},"kind":"param","name":"rawKeyUpStream","id":"rawKeyUpStream","line":"202"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"initializedField":{"name":"rawKeyDownStream","refId":"reactive_keyboard/ReactiveKeyboard/rawKeyDownStream"},"kind":"param","name":"rawKeyDownStream","id":"rawKeyDownStream","line":"203"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"KeyEvent","refId":"dart.dom.html/KeyEvent"}]},"initializedField":{"name":"rawKeyCombinedStream","refId":"reactive_keyboard/ReactiveKeyboard/rawKeyCombinedStream"},"kind":"param","name":"rawKeyCombinedStream","id":"rawKeyCombinedStream","line":"204"},{"isOptional":true,"isNamed":true,"kind":"param","name":"allowShiftOnlyHotKeys","id":"allowShiftOnlyHotKeys","line":"205"},{"isOptional":true,"isNamed":true,"kind":"param","name":"allowAltKeyPress","id":"allowAltKeyPress","line":"205"},{"isOptional":true,"isNamed":true,"kind":"param","name":"allowEnterKeyPress","id":"allowEnterKeyPress","line":"205"},{"isOptional":true,"isNamed":true,"kind":"param","name":"navKeys","id":"navKeys","line":"205"},{"isOptional":true,"isNamed":true,"kind":"param","name":"delKeys","id":"delKeys","line":"205"}],"isPrivate":true,"line":"199"}],"line":"11"}],"uri":"reactive_keyboard/lib/reactive_keyboard.dart","line":"1"}